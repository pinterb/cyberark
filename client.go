// Package cyberark provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package cyberark

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// FindAccounts request
	FindAccounts(ctx context.Context, params *FindAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddAccount request  with any body
	AddAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddAccount(ctx context.Context, body AddAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindAccountById request
	FindAccountById(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountPassword request
	GetAccountPassword(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAccountPassword request  with any body
	UpdateAccountPasswordWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAccountPassword(ctx context.Context, accountId string, body UpdateAccountPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLogonSession request  with any body
	CreateLogonSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLogonSession(ctx context.Context, body CreateLogonSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindPlatforms request
	FindPlatforms(ctx context.Context, params *FindPlatformsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindPlatformByName request
	FindPlatformByName(ctx context.Context, platformName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindSafes request
	FindSafes(ctx context.Context, params *FindSafesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddSafe request  with any body
	AddSafeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddSafe(ctx context.Context, body AddSafeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSafe request
	DeleteSafe(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindSafeByName request
	FindSafeByName(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindAccountGroupsBySafeName request
	FindAccountGroupsBySafeName(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindSafeMembers request
	FindSafeMembers(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) FindAccounts(ctx context.Context, params *FindAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAccount(ctx context.Context, body AddAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindAccountById(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindAccountByIdRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountPassword(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountPasswordRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountPasswordWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountPasswordRequestWithBody(c.Server, accountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountPassword(ctx context.Context, accountId string, body UpdateAccountPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountPasswordRequest(c.Server, accountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogonSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogonSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLogonSession(ctx context.Context, body CreateLogonSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLogonSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindPlatforms(ctx context.Context, params *FindPlatformsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindPlatformsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindPlatformByName(ctx context.Context, platformName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindPlatformByNameRequest(c.Server, platformName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindSafes(ctx context.Context, params *FindSafesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindSafesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSafeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSafeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSafe(ctx context.Context, body AddSafeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSafeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSafe(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSafeRequest(c.Server, safeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindSafeByName(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindSafeByNameRequest(c.Server, safeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindAccountGroupsBySafeName(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindAccountGroupsBySafeNameRequest(c.Server, safeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindSafeMembers(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindSafeMembersRequest(c.Server, safeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewFindAccountsRequest generates requests for FindAccounts
func NewFindAccountsRequest(server string, params *FindAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SearchType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchType", runtime.ParamLocationQuery, *params.SearchType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddAccountRequest calls the generic AddAccount builder with application/json body
func NewAddAccountRequest(server string, body AddAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewAddAccountRequestWithBody generates requests for AddAccount with any type of body
func NewAddAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindAccountByIdRequest generates requests for FindAccountById
func NewFindAccountByIdRequest(server string, accountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountPasswordRequest generates requests for GetAccountPassword
func NewGetAccountPasswordRequest(server string, accountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s/password/retrieve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAccountPasswordRequest calls the generic UpdateAccountPassword builder with application/json body
func NewUpdateAccountPasswordRequest(server string, accountId string, body UpdateAccountPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAccountPasswordRequestWithBody(server, accountId, "application/json", bodyReader)
}

// NewUpdateAccountPasswordRequestWithBody generates requests for UpdateAccountPassword with any type of body
func NewUpdateAccountPasswordRequestWithBody(server string, accountId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s/password/update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateLogonSessionRequest calls the generic CreateLogonSession builder with application/json body
func NewCreateLogonSessionRequest(server string, body CreateLogonSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLogonSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateLogonSessionRequestWithBody generates requests for CreateLogonSession with any type of body
func NewCreateLogonSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/cyberark/logon")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindPlatformsRequest generates requests for FindPlatforms
func NewFindPlatformsRequest(server string, params *FindPlatformsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platforms")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Active != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Active", runtime.ParamLocationQuery, *params.Active); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PlatformType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PlatformType", runtime.ParamLocationQuery, *params.PlatformType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindPlatformByNameRequest generates requests for FindPlatformByName
func NewFindPlatformByNameRequest(server string, platformName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platformName", runtime.ParamLocationPath, platformName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platforms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindSafesRequest generates requests for FindSafes
func NewFindSafesRequest(server string, params *FindSafesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/safes")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddSafeRequest calls the generic AddSafe builder with application/json body
func NewAddSafeRequest(server string, body AddSafeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddSafeRequestWithBody(server, "application/json", bodyReader)
}

// NewAddSafeRequestWithBody generates requests for AddSafe with any type of body
func NewAddSafeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/safes")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSafeRequest generates requests for DeleteSafe
func NewDeleteSafeRequest(server string, safeName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "safeName", runtime.ParamLocationPath, safeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/safes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindSafeByNameRequest generates requests for FindSafeByName
func NewFindSafeByNameRequest(server string, safeName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "safeName", runtime.ParamLocationPath, safeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/safes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindAccountGroupsBySafeNameRequest generates requests for FindAccountGroupsBySafeName
func NewFindAccountGroupsBySafeNameRequest(server string, safeName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "safeName", runtime.ParamLocationPath, safeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/safes/%s/accountgroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindSafeMembersRequest generates requests for FindSafeMembers
func NewFindSafeMembersRequest(server string, safeName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "safeName", runtime.ParamLocationPath, safeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/safes/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// FindAccounts request
	FindAccountsWithResponse(ctx context.Context, params *FindAccountsParams, reqEditors ...RequestEditorFn) (*FindAccountsResponse, error)

	// AddAccount request  with any body
	AddAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAccountResponse, error)

	AddAccountWithResponse(ctx context.Context, body AddAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAccountResponse, error)

	// FindAccountById request
	FindAccountByIdWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*FindAccountByIdResponse, error)

	// GetAccountPassword request
	GetAccountPasswordWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*GetAccountPasswordResponse, error)

	// UpdateAccountPassword request  with any body
	UpdateAccountPasswordWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountPasswordResponse, error)

	UpdateAccountPasswordWithResponse(ctx context.Context, accountId string, body UpdateAccountPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountPasswordResponse, error)

	// CreateLogonSession request  with any body
	CreateLogonSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogonSessionResponse, error)

	CreateLogonSessionWithResponse(ctx context.Context, body CreateLogonSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogonSessionResponse, error)

	// FindPlatforms request
	FindPlatformsWithResponse(ctx context.Context, params *FindPlatformsParams, reqEditors ...RequestEditorFn) (*FindPlatformsResponse, error)

	// FindPlatformByName request
	FindPlatformByNameWithResponse(ctx context.Context, platformName string, reqEditors ...RequestEditorFn) (*FindPlatformByNameResponse, error)

	// FindSafes request
	FindSafesWithResponse(ctx context.Context, params *FindSafesParams, reqEditors ...RequestEditorFn) (*FindSafesResponse, error)

	// AddSafe request  with any body
	AddSafeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSafeResponse, error)

	AddSafeWithResponse(ctx context.Context, body AddSafeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSafeResponse, error)

	// DeleteSafe request
	DeleteSafeWithResponse(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*DeleteSafeResponse, error)

	// FindSafeByName request
	FindSafeByNameWithResponse(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*FindSafeByNameResponse, error)

	// FindAccountGroupsBySafeName request
	FindAccountGroupsBySafeNameWithResponse(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*FindAccountGroupsBySafeNameResponse, error)

	// FindSafeMembers request
	FindSafeMembersWithResponse(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*FindSafeMembersResponse, error)
}

type FindAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchAccountsResults
}

// Status returns HTTPResponse.Status
func (r FindAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindAccountByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r FindAccountByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindAccountByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetAccountPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccountPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateAccountPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccountPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLogonSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogonResponseToken
}

// Status returns HTTPResponse.Status
func (r CreateLogonSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLogonSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindPlatformsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchPlatformsResults
}

// Status returns HTTPResponse.Status
func (r FindPlatformsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindPlatformsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindPlatformByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlatformDetails
}

// Status returns HTTPResponse.Status
func (r FindPlatformByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindPlatformByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindSafesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchSafesResults
}

// Status returns HTTPResponse.Status
func (r FindSafesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindSafesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddSafeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddSafeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddSafeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSafeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSafeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSafeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindSafeByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSafeResult
}

// Status returns HTTPResponse.Status
func (r FindSafeByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindSafeByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindAccountGroupsBySafeNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchSafeAcctGroupsResults
}

// Status returns HTTPResponse.Status
func (r FindAccountGroupsBySafeNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindAccountGroupsBySafeNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindSafeMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchSafeMembersResults
}

// Status returns HTTPResponse.Status
func (r FindSafeMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindSafeMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// FindAccountsWithResponse request returning *FindAccountsResponse
func (c *ClientWithResponses) FindAccountsWithResponse(ctx context.Context, params *FindAccountsParams, reqEditors ...RequestEditorFn) (*FindAccountsResponse, error) {
	rsp, err := c.FindAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindAccountsResponse(rsp)
}

// AddAccountWithBodyWithResponse request with arbitrary body returning *AddAccountResponse
func (c *ClientWithResponses) AddAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAccountResponse, error) {
	rsp, err := c.AddAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAccountResponse(rsp)
}

func (c *ClientWithResponses) AddAccountWithResponse(ctx context.Context, body AddAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAccountResponse, error) {
	rsp, err := c.AddAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAccountResponse(rsp)
}

// FindAccountByIdWithResponse request returning *FindAccountByIdResponse
func (c *ClientWithResponses) FindAccountByIdWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*FindAccountByIdResponse, error) {
	rsp, err := c.FindAccountById(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindAccountByIdResponse(rsp)
}

// GetAccountPasswordWithResponse request returning *GetAccountPasswordResponse
func (c *ClientWithResponses) GetAccountPasswordWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*GetAccountPasswordResponse, error) {
	rsp, err := c.GetAccountPassword(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountPasswordResponse(rsp)
}

// UpdateAccountPasswordWithBodyWithResponse request with arbitrary body returning *UpdateAccountPasswordResponse
func (c *ClientWithResponses) UpdateAccountPasswordWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountPasswordResponse, error) {
	rsp, err := c.UpdateAccountPasswordWithBody(ctx, accountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountPasswordResponse(rsp)
}

func (c *ClientWithResponses) UpdateAccountPasswordWithResponse(ctx context.Context, accountId string, body UpdateAccountPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountPasswordResponse, error) {
	rsp, err := c.UpdateAccountPassword(ctx, accountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountPasswordResponse(rsp)
}

// CreateLogonSessionWithBodyWithResponse request with arbitrary body returning *CreateLogonSessionResponse
func (c *ClientWithResponses) CreateLogonSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLogonSessionResponse, error) {
	rsp, err := c.CreateLogonSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogonSessionResponse(rsp)
}

func (c *ClientWithResponses) CreateLogonSessionWithResponse(ctx context.Context, body CreateLogonSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLogonSessionResponse, error) {
	rsp, err := c.CreateLogonSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLogonSessionResponse(rsp)
}

// FindPlatformsWithResponse request returning *FindPlatformsResponse
func (c *ClientWithResponses) FindPlatformsWithResponse(ctx context.Context, params *FindPlatformsParams, reqEditors ...RequestEditorFn) (*FindPlatformsResponse, error) {
	rsp, err := c.FindPlatforms(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindPlatformsResponse(rsp)
}

// FindPlatformByNameWithResponse request returning *FindPlatformByNameResponse
func (c *ClientWithResponses) FindPlatformByNameWithResponse(ctx context.Context, platformName string, reqEditors ...RequestEditorFn) (*FindPlatformByNameResponse, error) {
	rsp, err := c.FindPlatformByName(ctx, platformName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindPlatformByNameResponse(rsp)
}

// FindSafesWithResponse request returning *FindSafesResponse
func (c *ClientWithResponses) FindSafesWithResponse(ctx context.Context, params *FindSafesParams, reqEditors ...RequestEditorFn) (*FindSafesResponse, error) {
	rsp, err := c.FindSafes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindSafesResponse(rsp)
}

// AddSafeWithBodyWithResponse request with arbitrary body returning *AddSafeResponse
func (c *ClientWithResponses) AddSafeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSafeResponse, error) {
	rsp, err := c.AddSafeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSafeResponse(rsp)
}

func (c *ClientWithResponses) AddSafeWithResponse(ctx context.Context, body AddSafeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSafeResponse, error) {
	rsp, err := c.AddSafe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSafeResponse(rsp)
}

// DeleteSafeWithResponse request returning *DeleteSafeResponse
func (c *ClientWithResponses) DeleteSafeWithResponse(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*DeleteSafeResponse, error) {
	rsp, err := c.DeleteSafe(ctx, safeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSafeResponse(rsp)
}

// FindSafeByNameWithResponse request returning *FindSafeByNameResponse
func (c *ClientWithResponses) FindSafeByNameWithResponse(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*FindSafeByNameResponse, error) {
	rsp, err := c.FindSafeByName(ctx, safeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindSafeByNameResponse(rsp)
}

// FindAccountGroupsBySafeNameWithResponse request returning *FindAccountGroupsBySafeNameResponse
func (c *ClientWithResponses) FindAccountGroupsBySafeNameWithResponse(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*FindAccountGroupsBySafeNameResponse, error) {
	rsp, err := c.FindAccountGroupsBySafeName(ctx, safeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindAccountGroupsBySafeNameResponse(rsp)
}

// FindSafeMembersWithResponse request returning *FindSafeMembersResponse
func (c *ClientWithResponses) FindSafeMembersWithResponse(ctx context.Context, safeName string, reqEditors ...RequestEditorFn) (*FindSafeMembersResponse, error) {
	rsp, err := c.FindSafeMembers(ctx, safeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindSafeMembersResponse(rsp)
}

// ParseFindAccountsResponse parses an HTTP response from a FindAccountsWithResponse call
func ParseFindAccountsResponse(rsp *http.Response) (*FindAccountsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &FindAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchAccountsResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddAccountResponse parses an HTTP response from a AddAccountWithResponse call
func ParseAddAccountResponse(rsp *http.Response) (*AddAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseFindAccountByIdResponse parses an HTTP response from a FindAccountByIdWithResponse call
func ParseFindAccountByIdResponse(rsp *http.Response) (*FindAccountByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &FindAccountByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountPasswordResponse parses an HTTP response from a GetAccountPasswordWithResponse call
func ParseGetAccountPasswordResponse(rsp *http.Response) (*GetAccountPasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAccountPasswordResponse parses an HTTP response from a UpdateAccountPasswordWithResponse call
func ParseUpdateAccountPasswordResponse(rsp *http.Response) (*UpdateAccountPasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccountPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateLogonSessionResponse parses an HTTP response from a CreateLogonSessionWithResponse call
func ParseCreateLogonSessionResponse(rsp *http.Response) (*CreateLogonSessionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateLogonSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogonResponseToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindPlatformsResponse parses an HTTP response from a FindPlatformsWithResponse call
func ParseFindPlatformsResponse(rsp *http.Response) (*FindPlatformsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &FindPlatformsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchPlatformsResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindPlatformByNameResponse parses an HTTP response from a FindPlatformByNameWithResponse call
func ParseFindPlatformByNameResponse(rsp *http.Response) (*FindPlatformByNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &FindPlatformByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlatformDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindSafesResponse parses an HTTP response from a FindSafesWithResponse call
func ParseFindSafesResponse(rsp *http.Response) (*FindSafesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &FindSafesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchSafesResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddSafeResponse parses an HTTP response from a AddSafeWithResponse call
func ParseAddSafeResponse(rsp *http.Response) (*AddSafeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddSafeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteSafeResponse parses an HTTP response from a DeleteSafeWithResponse call
func ParseDeleteSafeResponse(rsp *http.Response) (*DeleteSafeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSafeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseFindSafeByNameResponse parses an HTTP response from a FindSafeByNameWithResponse call
func ParseFindSafeByNameResponse(rsp *http.Response) (*FindSafeByNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &FindSafeByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSafeResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindAccountGroupsBySafeNameResponse parses an HTTP response from a FindAccountGroupsBySafeNameWithResponse call
func ParseFindAccountGroupsBySafeNameResponse(rsp *http.Response) (*FindAccountGroupsBySafeNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &FindAccountGroupsBySafeNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchSafeAcctGroupsResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindSafeMembersResponse parses an HTTP response from a FindSafeMembersWithResponse call
func ParseFindSafeMembersResponse(rsp *http.Response) (*FindSafeMembersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &FindSafeMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchSafeMembersResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
