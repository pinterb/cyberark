// Package cyberark provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package cyberark

const (
	SessionTokenScopes = "SessionToken.Scopes"
)

// Defines values for PlatformAccountPropertiesType.
const (
	PlatformAccountPropertiesTypeMorpheusAzureServicePrincipal PlatformAccountPropertiesType = "MorpheusAzureServicePrincipal"

	PlatformAccountPropertiesTypeSNMPv3PrivKey PlatformAccountPropertiesType = "SNMPv3PrivKey"

	PlatformAccountPropertiesTypeUnixSSH PlatformAccountPropertiesType = "UnixSSH"
)

// Defines values for PlatformType.
const (
	PlatformTypeGroup PlatformType = "Group"

	PlatformTypeRegular PlatformType = "Regular"
)

// Defines values for SecretManagementStatus.
const (
	SecretManagementStatusFailed SecretManagementStatus = "failed"

	SecretManagementStatusInProcess SecretManagementStatus = "inProcess"

	SecretManagementStatusPartiallySucceeded SecretManagementStatus = "partiallySucceeded"

	SecretManagementStatusSucceeded SecretManagementStatus = "succeeded"
)

// Account defines model for Account.
type Account struct {
	// Embedded struct due to allOf(#/components/schemas/NewAccountPayload)
	NewAccountPayload `yaml:",inline"`
}

// A safe in CyberArk.
type GetSafeResult Safe

// Payload for v2 logon request.
type Logon struct {

	// Set this parameter to True to enable the user to open multiple connection sessions simultaneously.
	ConcurrentSession *bool `json:"concurrentSession,omitempty"`

	// Set this parameter with a new password to change the user's password.
	NewPassword *string `json:"newPassword,omitempty"`

	// The password used by the user to log in to the Vault.
	Password string `json:"password"`

	// The name of the user who is logging in to the Vault.
	UserName string `json:"userName"`
}

// Response from a v2 logon attempt
type LogonResponseToken string

// Payload for creating a new account in CyberArk.
type NewAccountPayload struct {

	// The name or address of the machine where the account will be used.
	Address *string `json:"address,omitempty"`

	// The name of the account.
	Name string `json:"name"`

	// Generic or base platform account properties implemented by CDW Managed Services.
	PlatformAccountProperties *PlatformAccountProperties `json:"platformAccountProperties,omitempty"`

	// The platform account types supported by CDW Managed Services.
	PlatformId PlatformAccountPropertiesType `json:"platformId"`

	// Describes how remote machines may be accessed.
	RemoteMachinesAccess *RemoteMachinesAccess `json:"remoteMachinesAccess,omitempty"`

	// The Safe where the account will be created.
	SafeName string `json:"safeName"`

	// The password value. This will not be returned in the API output.
	Secret string `json:"secret"`

	// Describes how account secret is managed.
	SecretManagement *SecretManagement `json:"secretManagement,omitempty"`

	// The type of password.
	SecretType string `json:"secretType"`

	// Account user's name.
	UserName *string `json:"userName,omitempty"`
}

// Generic or base platform account properties implemented by CDW Managed Services.
type PlatformAccountProperties struct {

	// The platform account types supported by CDW Managed Services.
	Type PlatformAccountPropertiesType `json:"type"`
}

// The platform account types supported by CDW Managed Services.
type PlatformAccountPropertiesType string

// The details of an individual CyberArk platform.
type PlatformDetails struct {

	// According to the Master Policy, is the platform active?
	Active *bool `json:"Active,omitempty"`

	// All the platform's parameters with their values.
	Details *map[string]interface{} `json:"Details,omitempty"`

	// The unique ID of the platform.
	PlatformID *string `json:"PlatformID,omitempty"`
}

// The individual platform property.
type PlatformProperty struct {

	// The displayed name of the property.
	DisplayName string `json:"displayName"`

	// The system name of the property.
	Name string `json:"name"`
}

// Type of CyberArk platform.
type PlatformType string

// Describes how remote machines may be accessed.
type RemoteMachinesAccess struct {

	// Whether or not to restrict access only to specified remote machines.
	AccessRestrictedToRemoteMachines *bool `json:"accessRestrictedToRemoteMachines,omitempty"`

	// List of remote machines, separated by semicolons.
	RemoteMachines *string `json:"remoteMachines,omitempty"`
}

// A safe in CyberArk.
type Safe struct {

	// Whether or not to automatically purge files after the end of the Object History Retention Period.
	AutoPurgeEnabled *bool `json:"AutoPurgeEnabled,omitempty"`

	// Description of new safe.
	Description *string `json:"Description,omitempty"`

	// Location of the Safe in the Vault.
	Location *string `json:"Location,omitempty"`

	// The name of the CPM user who will manage the new Safe.
	ManagingCPM *string `json:"ManagingCPM,omitempty"`

	// The number of days for which password versions are saved in the Safe.
	NumberOfDaysRetention *int32 `json:"NumberOfDaysRetention,omitempty"`

	// The number of retained versions of every password that is stored in the Safe.
	NumberOfVersionsRetention *int32 `json:"NumberOfVersionsRetention,omitempty"`

	// Whether or not to enable Object Level Access Control for the new Safe.
	OLACEnabled *bool `json:"OLACEnabled,omitempty"`

	// Name of safe to create.
	SafeName string `json:"SafeName"`
}

// The account group details for an individual Safe.
type SafeAccountGroup struct {

	// The ID of the account group.
	GroupId *string `json:"groupId,omitempty"`

	// The name of the account group.
	GroupName *string `json:"groupName,omitempty"`

	// The ID of the platform associated with the account group.
	GroupPlatformId *string `json:"groupPlatformId,omitempty"`

	// Name of safe where the account groups are.
	Safe *string `json:"safe,omitempty"`
}

// The details for an individual Safe.
type SafeMember struct {

	// The safe permissions details of a member may have. Note this list is complete.
	Permissions *SafePermissions `json:"Permissions,omitempty"`

	// The user belonging to the safe.
	UserName *string `json:"UserName,omitempty"`
}

// The safe permissions details of a member may have. Note this list is complete.
type SafePermissions struct {

	// The 'add safe' permission.
	Add *bool `json:"Add,omitempty"`

	// The 'add rename folder' permission.
	AddRenameFolder *bool `json:"AddRenameFolder,omitempty"`

	// The 'backup safe' permission.
	BackupSafe *bool `json:"BackupSafe,omitempty"`

	// The 'delete' permission.
	Delete *bool `json:"Delete,omitempty"`

	// The 'delete folder' permission.
	DeleteFolder *bool `json:"DeleteFolder,omitempty"`

	// The 'list content' permission.
	ListContent *bool `json:"ListContent,omitempty"`

	// The 'manage safe' permission.
	ManageSafe *bool `json:"ManageSafe,omitempty"`

	// The 'manage safe members' permission.
	ManageSafeMembers *bool `json:"ManageSafeMembers,omitempty"`

	// The 'move files & folders' permission.
	MoveFilesAndFolders *bool `json:"MoveFilesAndFolders,omitempty"`

	// The 'rename' permission.
	Rename *bool `json:"Rename,omitempty"`

	// The 'restricted retrieve' permission.
	RestrictedRetrieve *bool `json:"RestrictedRetrieve,omitempty"`

	// The 'retrieve' permission.
	Retrieve *bool `json:"Retrieve,omitempty"`

	// The 'unlock' permission.
	Unlock *bool `json:"Unlock,omitempty"`

	// The 'update' permission.
	Update *bool `json:"Update,omitempty"`

	// The 'update metadata' permission.
	UpdateMetadata *bool `json:"UpdateMetadata,omitempty"`

	// The 'validate safe content' permission.
	ValidateSafeContent *bool `json:"ValidateSafeContent,omitempty"`

	// The 'view audit' permission.
	ViewAudit *bool `json:"ViewAudit,omitempty"`

	// The 'view members' permission.
	ViewMembers *bool `json:"ViewMembers,omitempty"`
}

// The individual account detail returned when searching for Accounts.
type SearchAccountsDetail struct {

	// The name or address of the machine where the account is used.
	Address *string `json:"address,omitempty"`

	// The last time when the account or one its file categories was created or changed.
	CategoryModificationTime *int32 `json:"categoryModificationTime,omitempty"`

	// Date and time account was created.
	CreatedTime *int32 `json:"createdTime,omitempty"`

	// The ID of the account.
	Id *string `json:"id,omitempty"`

	// The name of the account.
	Name *string `json:"name,omitempty"`

	// Object containing key-value pairs to associate with the account, as defined by the account platform.
	PlatformAccountProperties *map[string]interface{} `json:"platformAccountProperties,omitempty"`

	// The platform assigned to this account.
	PlatformId *string `json:"platformId,omitempty"`

	// The Safe where the account is located.
	SafeName *string `json:"safeName,omitempty"`

	// Describes how account secret is managed.
	SecretManagement *SecretManagement `json:"secretManagement,omitempty"`

	// The type of password.
	SecretType *string `json:"secretType,omitempty"`

	// Account user's name.
	UserName *string `json:"userName,omitempty"`
}

// The results of searching for Accounts.
type SearchAccountsResults struct {

	// The number of results returned.
	Count *int32 `json:"count,omitempty"`

	// The collection of individual account detail.
	Value *[]SearchAccountsDetail `json:"value,omitempty"`
}

// The individual platform detail returned when searching for Platforms.
type SearchPlatformsDetail struct {

	// Defines how the platform credentials are managed.
	CredentialsManagement *struct {

		// Indicates whether a 'Change now' process can be initiated manually.
		AllowManualChange *bool `json:"allowManualChange,omitempty"`

		// Indicates whether a 'Reconcile now' process can be initiated manually.
		AllowManualReconciliation *bool `json:"allowManualReconciliation,omitempty"`

		// Indicates whether a 'Verify now' process can be initiated manually.
		AllowManualVerification *bool `json:"allowManualVerification,omitempty"`

		// A list of safes (regular expression) to which this platform can be applied.
		AllowedSafes *string `json:"allowedSafes,omitempty"`

		// Whether or not passwords will be reconciled automatically after the CPM detects a password on a remote machine that is not synchronized with its corresponding password in the Server.
		AutomaticReconcileWhenUnsynched *bool `json:"automaticReconcileWhenUnsynched,omitempty"`

		// Indicates whether accounts related to this platform will be changed periodically.
		PerformPeriodicChange *bool `json:"performPeriodicChange,omitempty"`

		// Indicates whether accounts related to this platform will be verified periodically.
		PerformPeriodicVerification *bool `json:"performPeriodicVerification,omitempty"`

		// The number of days between each periodic change.
		RequirePasswordChangeEveryXDays *int32 `json:"requirePasswordChangeEveryXDays,omitempty"`

		// The number of days between each periodic verification.
		RequirePasswordVerificationEveryXDays *int32 `json:"requirePasswordVerificationEveryXDays,omitempty"`
	} `json:"credentialsManagement,omitempty"`

	// The base information of the platform
	General *struct {

		// Indicates whether a platform is active or inactive.
		Active *bool `json:"active,omitempty"`

		// A description of the platform.
		Description *string `json:"description,omitempty"`

		// The platform's unique ID.
		Id *string `json:"id,omitempty"`

		// The name of the platform.
		Name *string `json:"name,omitempty"`

		// The ID of the default platform that this platform is based on (duplicated from).
		PlatformBaseID *string `json:"platformBaseID,omitempty"`

		// Type of CyberArk platform.
		PlatformType *PlatformType `json:"platformType,omitempty"`

		// The type of system to which the platform is applied.
		SystemType *string `json:"systemType,omitempty"`
	} `json:"general,omitempty"`

	// A list of all linked accounts types that are relevant for the platform.
	LinkedAccounts *[]PlatformProperty `json:"linkedAccounts,omitempty"`

	// Defines how the platform is accessed, managed, etc.
	PrivilegedAccessWorkflows *struct {

		// Indicates whether the Enforce check-in/check-out exclusive access rule is active or inactive for this platform.
		EnforceCheckinCheckoutExclusiveAccess *bool `json:"enforceCheckinCheckoutExclusiveAccess,omitempty"`

		// Indicates whether the Enforce one-time password access rule is active for this platform.
		EnforceOnetimePasswordAccess *bool `json:"enforceOnetimePasswordAccess,omitempty"`

		// Indicates whether accounts associated with this platform require dual control.
		RequireDualControlPasswordAccessApproval *bool `json:"requireDualControlPasswordAccessApproval,omitempty"`
	} `json:"privilegedAccessWorkflows,omitempty"`

	// The base information of the platform
	Properties *struct {

		// A list of all optional properties defined for the platform.
		Optional *[]PlatformProperty `json:"optional,omitempty"`

		// A list of all required properties defined for the platform.
		Required *[]PlatformProperty `json:"required,omitempty"`
	} `json:"properties,omitempty"`

	// Defines how the platform session is managed.
	SessionManagement *struct {

		// The unique ID of a PSM Server.
		PSMServerID *string `json:"PSMServerID,omitempty"`

		// Indicates whether the Record and save session activity rule is active for this platform.
		RecordAndSaveSessionActivity *bool `json:"recordAndSaveSessionActivity,omitempty"`

		// Indicates whether the Require privileged session monitoring and isolation rule is active for this platform.
		RequirePrivilegedSessionMonitoringAndIsolation *bool `json:"requirePrivilegedSessionMonitoringAndIsolation,omitempty"`
	} `json:"sessionManagement,omitempty"`
}

// The results of searching for Platforms.
type SearchPlatformsResults struct {

	// The collection of Platform details.
	Platforms *[]SearchPlatformsDetail `json:"Platforms,omitempty"`
}

// Results for safe account groups searches.
type SearchSafeAcctGroupsResults struct {

	// The collection of account group details for an individual Safe.
	SearchSafeAcctGroupsResult *[]SafeAccountGroup `json:"searchSafeAcctGroupsResult,omitempty"`
}

// Results for safe membership searches.
type SearchSafeMembersResults struct {

	// The collection of safe details for a given membership.
	Members *[]SafeMember `json:"members,omitempty"`
}

// Results for safe searches.
type SearchSafesResults struct {

	// The collection of safe details.
	GetSafesResult *[]Safe `json:"GetSafesResult,omitempty"`
}

// Describes how account secret is managed.
type SecretManagement struct {

	// Whether the account secret is automatically managed by the CPM.
	AutomaticManagementEnabled *bool `json:"automaticManagementEnabled,omitempty"`

	// Last modified date of the account.
	LastModifiedTime *int32 `json:"lastModifiedTime,omitempty"`

	// Last reconciled date of the account.
	LastReconciledTime *int32 `json:"lastReconciledTime,omitempty"`

	// Last verified date of the account.
	LastVerifiedTime *int32 `json:"lastVerifiedTime,omitempty"`

	// Reason for disabling automatic secret management.
	ManualManagementReason *string `json:"manualManagementReason,omitempty"`

	// Account management status.
	Status *SecretManagementStatus `json:"status,omitempty"`
}

// Account management status.
type SecretManagementStatus string

// FindAccountsParams defines parameters for FindAccounts.
type FindAccountsParams struct {

	// List of keywords to search for in accounts, separated by a space.
	Search *string `json:"search,omitempty"`

	// Get accounts that either contain or start with the value specified in the Search parameter.
	SearchType *string `json:"searchType,omitempty"`

	// Property or properties by which to sort returned accounts, followed by asc (default) or desc to control sort direction. Separate multiple properties with commas, up to a maximum of three properties.
	Sort *string `json:"sort,omitempty"`

	// Offset of the first account that is returned in the collection of results.
	Offset *float32 `json:"offset,omitempty"`

	// Maximum number of returned accounts. If not specified, the default value is 50. The maximum number that can be specified is 1000.
	Limit *float32 `json:"limit,omitempty"`

	// Search for accounts filtered by 'safeName' or 'modificationTime'
	Filter *string `json:"filter,omitempty"`
}

// AddAccountJSONBody defines parameters for AddAccount.
type AddAccountJSONBody NewAccountPayload

// UpdateAccountPasswordJSONBody defines parameters for UpdateAccountPassword.
type UpdateAccountPasswordJSONBody struct {
	NewCredentials string `json:"NewCredentials"`
}

// CreateLogonSessionJSONBody defines parameters for CreateLogonSession.
type CreateLogonSessionJSONBody Logon

// FindPlatformsParams defines parameters for FindPlatforms.
type FindPlatformsParams struct {

	// Filter according to whether the platform is active or not.
	Active *bool `json:"Active,omitempty"`

	// Filter according to the platform type.
	PlatformType *PlatformType `json:"PlatformType,omitempty"`

	// Searching according to the platform name.
	Search *string `json:"Search,omitempty"`
}

// FindSafesParams defines parameters for FindSafes.
type FindSafesParams struct {

	// The search query.
	Query string `json:"query"`
}

// AddSafeJSONBody defines parameters for AddSafe.
type AddSafeJSONBody Safe

// AddAccountJSONRequestBody defines body for AddAccount for application/json ContentType.
type AddAccountJSONRequestBody AddAccountJSONBody

// UpdateAccountPasswordJSONRequestBody defines body for UpdateAccountPassword for application/json ContentType.
type UpdateAccountPasswordJSONRequestBody UpdateAccountPasswordJSONBody

// CreateLogonSessionJSONRequestBody defines body for CreateLogonSession for application/json ContentType.
type CreateLogonSessionJSONRequestBody CreateLogonSessionJSONBody

// AddSafeJSONRequestBody defines body for AddSafe for application/json ContentType.
type AddSafeJSONRequestBody AddSafeJSONBody
